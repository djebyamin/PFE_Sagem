generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id                 Int               @id @default(autoincrement())
  nom                String
  prenom             String
  email              String            @unique
  telephone          String?
  identifiant        String            @unique
  mot_de_passe       String?
  date_creation      DateTime          @default(now())
  derniere_connexion DateTime?
  actif              Boolean           @default(true)
  googleId           String?           @unique
  image              String?
  accounts           Account[]
  participations     Affectation[]
  commentaires       Commentaire[]
  missions_creees    Mission[]         @relation("Createur")
  notifications      Notification[]
  preventifs         Preventif[]
  roles              RoleUtilisateur[]
  sessions           Session[]
  evenements         Evenement[]       @relation("Participants")
    messages      Message[]
  participations_conv Participant[]

  @@map("utilisateurs")
}

model Account {
  id                String      @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              Utilisateur @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String      @unique
  userId       Int
  expires      DateTime
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         Utilisateur @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Role {
  id           Int               @id @default(autoincrement())
  nom          String            @unique
  description  String?
  permissions  RolePermission[]
  utilisateurs RoleUtilisateur[]

  @@map("roles")
}

model RoleUtilisateur {
  utilisateurId    Int
  roleId           Int
  date_attribution DateTime    @default(now())
  role             Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  utilisateur      Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)

  @@id([utilisateurId, roleId])
  @@map("role_utilisateurs")
}

model Permission {
  id          Int              @id @default(autoincrement())
  code        String           @unique
  description String?
  roles       RolePermission[]

  @@map("permissions")
}

model RolePermission {
  roleId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model Mission {
  id             Int            @id @default(autoincrement())
  titre          String
  description    String?
  date_creation  DateTime       @default(now())
  date_debut     DateTime?
  date_fin       DateTime?
  statut         StatutMission  @default(CREEE)
  priorite       Int            @default(1)
  client         String?
  reference_odoo String?        @unique
  createurId     Int
    budget         Float?         // Le champ 'budget' ajout√© ici
  affectations   Affectation[]
  commentaires   Commentaire[]
  evenements     Evenement[]
  createur       Utilisateur    @relation("Createur", fields: [createurId], references: [id])
  notifications  Notification[]
  preventifs     Preventif[]
  rapports       Rapport[]
  equipements    Equipement[]   @relation("EquipementToMission")
  conversations  Conversation[]  // Champ inverse

  @@map("missions")
    RapportODOO RapportODOO[]
}

model Affectation {
  id               Int         @id @default(autoincrement())
  date_affectation DateTime    @default(now())
  role_mission     String
  commentaire      String?
  missionId        Int
  utilisateurId    Int
  mission          Mission     @relation(fields: [missionId], references: [id], onDelete: Cascade)
  utilisateur      Utilisateur @relation(fields: [utilisateurId], references: [id])

  @@map("affectations")
}

model Commentaire {
  id            Int         @id @default(autoincrement())
  contenu       String
  date_creation DateTime    @default(now())
  type          String?
  missionId     Int
  utilisateurId Int
  mission       Mission     @relation(fields: [missionId], references: [id], onDelete: Cascade)
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id])

  @@map("commentaires")
}

model Notification {
  id            Int         @id @default(autoincrement())
  titre         String
  contenu       String
  date_envoi    DateTime    @default(now())
  lu            Boolean     @default(false)
  missionId     Int?
  utilisateurId Int
  mission       Mission?    @relation(fields: [missionId], references: [id])
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Rapport {
  id                Int         @id @default(autoincrement())
  titre             String
  contenu           String
  date_creation     DateTime    @default(now())
  date_modification DateTime    @default(now())
  version           String
  format            String?
  missionId         Int
  equipementId      Int?
  equipement        Equipement? @relation(fields: [equipementId], references: [id])
  mission           Mission     @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@map("rapports")
}

model Calendrier {
  id          Int         @id @default(autoincrement())
  titre       String
  description String?
  evenements  Evenement[]

  @@map("calendriers")
}

model Evenement {
  id           Int           @id @default(autoincrement())
  titre        String
  description  String?
  date_debut   DateTime
  date_fin     DateTime
  lieu         String?
  recurrence   String?
  calendrierId Int
  missionId    Int?
  calendrier   Calendrier    @relation(fields: [calendrierId], references: [id])
  mission      Mission?      @relation(fields: [missionId], references: [id])
  participants Utilisateur[] @relation("Participants")

  @@map("evenements")
}

model IntegrationODOO {
  id               Int       @id @default(autoincrement())
  url_api          String
  api_key          String
  database         String    // Nom de la base de donn√©es Odoo
  username         String    // Nom d'utilisateur Odoo
  password         String    // Mot de passe Odoo
  derniere_synchro DateTime?
  config           Json?     // Configuration suppl√©mentaire au format JSON
  actif            Boolean   @default(true)
  rapports         RapportODOO[]

  @@map("integration_odoo")
}

// Nouveau mod√®le pour les rapports Odoo
model RapportODOO {
  id                Int             @id @default(autoincrement())
  reference_odoo    String          @unique  // R√©f√©rence unique dans Odoo
  type_rapport      String          // Type de rapport (vente, achat, stock, etc.)
  date_creation     DateTime        @default(now())
  date_modification DateTime        @updatedAt
  statut            String          @default("EN_ATTENTE")
  donnees           Json            // Donn√©es du rapport
  integrationId     Int
  integration       IntegrationODOO @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  missionId         Int?
  mission           Mission?        @relation(fields: [missionId], references: [id], onDelete: SetNull)

  @@map("rapports_odoo")
}

model Statistique {
  id          Int      @id @default(autoincrement())
  titre       String
  description String?
  donnees     Json
  date_calcul DateTime @default(now())
  widgets     Widget[]

  @@map("statistiques")
}

model TableauBord {
  id          Int      @id @default(autoincrement())
  titre       String
  description String?
  widgets     Widget[]

  @@map("tableaux_bord")
}

model Widget {
  id            Int          @id @default(autoincrement())
  titre         String
  type          String
  donnees       Json?
  parametres    Json?
  tableauBordId Int
  statistiqueId Int?
  statistique   Statistique? @relation(fields: [statistiqueId], references: [id])
  tableauBord   TableauBord  @relation(fields: [tableauBordId], references: [id], onDelete: Cascade)

  @@map("widgets")
}
model Equipement {
  id                  Int         @id @default(autoincrement())
  code_imo            String      @unique
  nom_testeur         String
    nom_equipement     String   // üëà ajout√© ici
  designation         String
  date_mise_en_marche DateTime?
  arborescence        String?
  date_garantie       DateTime?
  categorie           String      // Nouvelle cat√©gorie
  nombre              Int         // Nouveau champ pour le nombre d'√©quipements
  preventifs          Preventif[]
  rapports            Rapport[]
  missions            Mission[]   @relation("EquipementToMission")

  @@map("equipements")
}


model Preventif {
  id               Int          @id @default(autoincrement())
  titre            String
  description      String?
  date_planifiee   DateTime
  date_realisation DateTime?
  statut           String       @default("PLANIFIE")
  commentaire      String?
  frequence        String?
  duree_estimee    Int?
  equipementId     Int
  responsableId    Int?
  missionId        Int?
  equipement       Equipement   @relation(fields: [equipementId], references: [id])
  mission          Mission?     @relation(fields: [missionId], references: [id])
  responsable      Utilisateur? @relation(fields: [responsableId], references: [id])

  @@map("preventifs")
}
enum StatutMission {
  CREEE
  PLANIFIEE
  AFFECTEE
  EN_COURS
  EN_PAUSE
  TERMINEE
  VALIDEE
  ARCHIVEE
}
model Conversation {
  id            Int             @id @default(autoincrement())
  titre         String?
  date_creation DateTime        @default(now())
  messages      Message[]
  participants  Participant[]
  missionId     Int?            // Optionnel: lier une conversation √† une mission
  mission       Mission?        @relation(fields: [missionId], references: [id], onDelete: SetNull)

  @@map("conversations")
}

// Mod√®le pour les participants √† une conversation
model Participant {
  id              Int          @id @default(autoincrement())
  conversationId  Int
  utilisateurId   Int
  date_ajout      DateTime     @default(now())
  derniere_lecture DateTime?   // Pour savoir quand l'utilisateur a lu la conversation
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  utilisateur     Utilisateur  @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)

  @@unique([conversationId, utilisateurId])
  @@map("participants")
}

// Mod√®le pour les messages
model Message {
  id              Int          @id @default(autoincrement())
  contenu         String
  date_envoi      DateTime     @default(now())
  lu              Boolean      @default(false)
  conversationId  Int
  expediteurId    Int
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  expediteur      Utilisateur  @relation(fields: [expediteurId], references: [id], onDelete: Cascade)
  pieceJointeUrl  String?      // URL vers une pi√®ce jointe (optionnel)

  @@map("messages")
}